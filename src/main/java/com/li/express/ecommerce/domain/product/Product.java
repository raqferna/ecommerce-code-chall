package com.li.express.ecommerce.domain.product;

import java.util.Date;
import java.util.List;
import java.util.UUID;

public class Product {
	
	private ProductId productId;
    private String productName;
    private ProductDescription productDescription;
    private Date dateCreated;
    private double productPrice;
    private List<ProductOrderField> productOrderFields;
    private ProductStatus productStatus;
    
    

    public Product(ProductId id, String productName, ProductDescription productDescription, double productPrice,
			List<ProductOrderField> productOrderFields) {
	    	this.productDescription = productDescription;
	    	this.productName = productName;
	    	this.productPrice=productPrice;
	    	this.productId = id;
	    	this.dateCreated= new Date();
	    	this.productOrderFields = productOrderFields;
	    	this.productStatus = ProductStatus.ACTIVE;
	}
 
    
    public boolean isActive() {
      return ProductStatus.ACTIVE.equals(this.productStatus);
    }
    
	public void inactiveProduct() {
        productStatus = ProductStatus.INACTIVE;
    }
	public void activeProduct() {
        productStatus = ProductStatus.ACTIVE;
    }
	
	public ProductId getProductId() {
		return productId;
	}

	public String getProductName() {
		return productName;
	}

	public ProductDescription getProductDescription() {
		return productDescription;
	}

	public Date getDateCreated() {
		return dateCreated;
	}

	public double getProductPrice() {
		return productPrice;
	}

	public List<ProductOrderField> getProductOrderFields() {
		return productOrderFields;
	}

	public ProductStatus getProductStatus() {
		return productStatus;
	}


	
 public static final class ProductBuilder {
	    private String productName;
	    private ProductDescription productDescription;
	    private double productPrice;
	    private List<ProductOrderField> productOrderFields;
	    private ProductId productId;
	    
	    public ProductBuilder (ProductId productId) {
	    	this.productId = productId;
	    }
	    
	    public ProductBuilder productOrderFields(List<ProductOrderField> productOrderFields) {
	    	this.productOrderFields = productOrderFields;
	    	return this;
	    }
	    
	    public ProductBuilder productName(String productName) {
	    	this.productName = productName;
	    	return this;
	    }
	    public ProductBuilder productDescription(ProductDescription productDescription) {
	    	this.productDescription = productDescription;
	    	return this;
	    }
	    public ProductBuilder productPrice(double productPrice) {
	    	this.productPrice = productPrice;
	    	return this;
	    }
	
	    public Product build() {
	    	return new Product(productId, productName, productDescription,productPrice,productOrderFields );
	    }

	    //TODO REFACTOR--GENERATED BY DEFAULT
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + ((productDescription == null) ? 0 : productDescription.hashCode());
			result = prime * result + ((productId == null) ? 0 : productId.hashCode());
			result = prime * result + ((productName == null) ? 0 : productName.hashCode());
			result = prime * result + ((productOrderFields == null) ? 0 : productOrderFields.hashCode());
			long temp;
			temp = Double.doubleToLongBits(productPrice);
			result = prime * result + (int) (temp ^ (temp >>> 32));
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			ProductBuilder other = (ProductBuilder) obj;
			if (productDescription == null) {
				if (other.productDescription != null)
					return false;
			} else if (!productDescription.equals(other.productDescription))
				return false;
			if (productId == null) {
				if (other.productId != null)
					return false;
			} else if (!productId.equals(other.productId))
				return false;
			if (productName == null) {
				if (other.productName != null)
					return false;
			} else if (!productName.equals(other.productName))
				return false;
			if (productOrderFields == null) {
				if (other.productOrderFields != null)
					return false;
			} else if (!productOrderFields.equals(other.productOrderFields))
				return false;
			if (Double.doubleToLongBits(productPrice) != Double.doubleToLongBits(other.productPrice))
				return false;
			return true;
		}
    }







}
